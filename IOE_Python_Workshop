{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Section 1: Python Basics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45\n",
      "88\n",
      "120\n"
     ]
    }
   ],
   "source": [
    "'''where the variable named on the left refers to the value on the right. \n",
    "E.g. if y=x, y should now refer to whatever value x refers to\n",
    "If you assign the value 9 to y, or if y=9, it can be changed in the code below, or it can be updated to y = 23, or even y = ’banana’\n",
    "'''\n",
    "\n",
    "a = 45\n",
    "b = 88\n",
    "c = 120\n",
    "\n",
    "print(a)\n",
    "print(b)\n",
    "print(c)\n",
    "#--- https://www.pluralsight.com/guides/python-basics-variables-assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "88\n",
      "45\n"
     ]
    }
   ],
   "source": [
    "print(b)\n",
    "\n",
    "b = a #--change the value of b to equal the value assigned to a\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lists\n",
    "- Lists are sequential collection of Python data values, where each value can be indexed and identified by that index.\n",
    "- Lists are ordered from left to right. \n",
    "- Each value in the list is called an element.\n",
    "- Lists are mutable, meaning you can change the elements in the list (by adding elements, removing elements, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Examples of 3 types of lists:\n",
    "\n",
    "lst1 = [10, 20, 30, 40] #--a list of integers, where each integer is an element of the list\n",
    "\n",
    "lst2 = ['banana', 'apple', 'orange'] #--a list of strings, where each string is an element of the list\n",
    "\n",
    "lst3 = [10, 20, 'banana', 'apple', 'carrot'] #--a list of integers and strings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Manipulating Lists and List Elements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Indexing a List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "banana\n",
      "40\n",
      "apple\n"
     ]
    }
   ],
   "source": [
    "#--Indexing: Accessing elements of a string--\n",
    "print(lst1[2])\n",
    "print(lst2[0])\n",
    "\n",
    "#--Negative Indexing--\n",
    "print(lst1[-1])\n",
    "print(lst2[-2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Slicing a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20, 'banana', 'apple']\n",
      "[20, 'banana', 'apple', 'carrot']\n"
     ]
    }
   ],
   "source": [
    "#--Slicing a list--\n",
    "print(lst3[1:4])\n",
    "\n",
    "#--Slicing a list: how is this one different from the one above?--\n",
    "print(lst3[1:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Determining the length of a list--\n",
    "print(len(lst1))\n",
    "print(len(lst3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Seeing if an element is in a list--\n",
    "print('banana' in lst1)\n",
    "print('banana' in lst2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Changing an element in a list--\n",
    "lst1[0] = 5 #--This changes the first element in lst1 from 10 to 5\n",
    "print(lst1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Adding an element to the end a list\n",
    "lst2.append('strawberry') #--This adds the string strawberry to the end of lst2\n",
    "print(lst2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Adding an element to a specific part of a list\n",
    "lst1.insert(1, 7) #--This allows you to add the number 7 to the 1st index of lst1. Change the value 0 to 2 and see what happens!\n",
    "print(lst1)\n",
    "\n",
    "del lst1[0] #--This deletes the element in the 0th index of lst1\n",
    "print(lst1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List exercises to try on your own or with a partner\n",
    "- to see the result of your command, either\n",
    " - print your list on its own line like this: print(fruit_lst)\n",
    " - type the name of your list below your command like this: fruit_lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Lists for exercises:\n",
    "fruit_lst = ['papaya', 'mango', 'blueberry', 'banana']\n",
    "\n",
    "num_lst = [50, 33, 27, 89]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['papaya', 'mango', 'blueberry', 'banana', 'orange']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#--1a. Add the string 'orange' to the end fruit_lst.\n",
    "fruit_lst.append('orange')\n",
    "fruit_lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--1b. Add the number/integer 4 to the end of num_lst.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--2a. Delete the element in index 2 of fruit_lst.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--2b. In num_lst, delete the element in index 3.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--3a. Change the 0th element of fruit_lst from 'papaya' to 'carrot'.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--3b. From num_lst, change the element in index 1 from 33 to 105.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--4a. Check if the element 'papaya' is still in fruit_lst.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--4b. Check if the number/integer 33 is still in num_lst\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dictionary\n",
    "- A Dictionary is an unordered collection that maps associations of keys with values.\n",
    "- For example, a key can be any immutable type (such as a number or string) and its associated value can be any type of Python data object.\n",
    "- You can think of a Python dictionary as similar to an old school dictionary, where the word you are trying to look up would be the key and the defintion of that word is its value.\n",
    " - For example, the word 'apple' has a definition 'the round fruit of a tree of the rose family'. Here, the word 'apple' would be the key and its definition would be its value. \n",
    " - The main difference between an old school dictionary for words and a Python dictionary is that an old school dictionary will always have its words in alphabetical order, where a Python dictionary will always return jumbled results and the order of results will differ each time you print the Python dictionary. \n",
    " \n",
    " \n",
    "- Benefits of using dictionary over a list:\n",
    " - Looking up items in a dictionary is much faster than looking up items in a list."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Working with a filled dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Here's a dictionary with keys and associated values--\n",
    "pets = {'llama': 7, 'dog': 6, 'elephant':2}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "#--Lets extract extract some values from our pet dictionary--\n",
    "print(pets['dog'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cat': 7, 'dog': 6}"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#--Deleting items from your dictionary--\n",
    "del(pets['elephant'])\n",
    "pets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cat': 7, 'dog': 10}"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#--Changing dictionary values--\n",
    "pets['dog'] = 10\n",
    "pets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cat': 7, 'dog': 10, 'rabbit': 17}"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#--Using operations on dictionary values--\n",
    "pets['rabbit'] = pets['cat'] + pets['dog']\n",
    "pets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Extracting dictionary keys--\n",
    "key_lst = list(pets.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Extracting dictionary values--\n",
    "val_lst = list(pets.values())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a new dictionary from scratch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#--Let's create a dictionary!--\n",
    "my_dict = {} #--This initiates an empty dictionary where you can store keys and their associated values\n",
    "my_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bus': 15}"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#--Adding keys and their associated values to a dictionary--\n",
    "my_dict['bus'] = 15\n",
    "my_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dictionary Exercises"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Come up with and add 2 more keys and associated values to my_dict\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--In my_dict, Change the value of the key 'bus' from 15 to 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Extract the value of 'bus' from my_dict\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "3\n",
      "10\n",
      "25\n",
      "1.8\n",
      "1\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "#--Addition--  NOTE: Try subbing in 2.0 for the 2 and see what happens to your result!\n",
    "print(6 + 3)\n",
    "\n",
    "#--Subtraction--\n",
    "print(6 - 2)\n",
    "\n",
    "#--Multiplication--\n",
    "print(6 * 2)\n",
    "\n",
    "#--Exponentation--\n",
    "print(6**2)\n",
    "\n",
    "#--Division--\n",
    "print(9 / 5)\n",
    "\n",
    "#--Truncated Division--\n",
    "print(9 // 5)\n",
    "\n",
    "#--Remainder, or modulus operator--\n",
    "print(9 % 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Types: string, int, float "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Strings\n",
    "- A string can be defined with either single(' ') or double quoutes (\" \") as its boundaries.\n",
    " - Using a double quote may be easier with sentences, so it doesn't think an apostrophe is the end of a string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, world!\n",
      "Hello, world!\n"
     ]
    }
   ],
   "source": [
    "#--This is a string--\n",
    "print(\"Hello, world!\")\n",
    "\n",
    "#--This is the same string, but with single quotes as its boundaries. Notice how we get the same result as the output from above--\n",
    "print('Hello, world!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Symbols for string manipulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, \n",
      " world!\n",
      "Hello, \t world!\n"
     ]
    }
   ],
   "source": [
    "#--This string has a newline character in it, or '\\n'. What does it do?\n",
    "print(\"Hello, \\n world!\")\n",
    "\n",
    "#--This is a tab character--\n",
    "print(\"Hello, \\t world!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "var1 = 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var2 = 2.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Boolean Values and Expressions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "<class 'bool'>\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "print(True)\n",
    "print(type(True))\n",
    "print(type(False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(5 == 5)\n",
    "print(5 == 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking Data Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'float'>\n",
      "<class 'str'>\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "var1 = 2\n",
    "var2 = 2.0\n",
    "var3 = 'apple'\n",
    "var4 = True\n",
    "\n",
    "print(type(var1))\n",
    "print(type(var2))\n",
    "print(type(var3))\n",
    "print(type(var4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nested Objects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nested Lists\n",
    "- a collection of lists within a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "nested_lst = [[2,7,8],[3,1,5],[4,0,9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 7, 8]\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "#--Extracting elements from a nested list--\n",
    "\n",
    "print(nested_lst[0])  #--this will give you the 0th element of nested_lst, which is a list\n",
    "\n",
    "print(nested_lst[0][2]) #--the will give the 2nd element within the list at index 0 in nested_lst"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nested Dictionaries\n",
    "- a collection of dictionaries within a single dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "nested_dict = { 'dictA': {'key_1': 'value_1'},\n",
    "                'dictB': {'key_2': 'value_2'}}\n",
    "\n",
    "nested_dict2 = { 'Dict1': {'name': 'Kim', 'age': '19'}, \n",
    "         'Dict2': {'name': 'Alex', 'age': '25'}} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'key_1': 'value_1'}\n",
      "value_1\n"
     ]
    }
   ],
   "source": [
    "#--Accessing values within a nested dictionary--\n",
    "\n",
    "print(nested_dict['dictA']) #--accesses the value of dictionary dictA, which is another dictionary\n",
    "\n",
    "print(nested_dict['dictA']['key_1']) #--accesses the value of key_1, which is within dictA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercises: Nested Objects "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Nested List--\n",
    "\n",
    "#--1. Can you extract the list at index 0 of nested_lst?\n",
    "\n",
    "\n",
    "#--2. In nexted_lst, from the list at index 2, gather its element at index 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--Nested Dictionary--\n",
    "\n",
    "#--1. Can you extract dictB from nested_dict?\n",
    "\n",
    "#--2. Can you extract the value of key_2?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## if/else/elif\n",
    "- __When To Use:__ When you would like to compare values\n",
    "- Notice that the code below the if, else, elif statements are __indented__. \n",
    " - If you hit enter after putting the : at the end, it should automatically do this for you.\n",
    " - Other programming languages may use curly-brackets to achieve this.\n",
    " - If you do not indent the code lines below each statement that you want included, an error will be produced."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using Indentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-136-4276c1871af7>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-136-4276c1871af7>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    print(\"b is greater than a\") # you will get an error\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "a = 55\n",
    "b = 320\n",
    "if b > a:\n",
    "print(\"b is greater than a\") #--This will produce an error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b is greater than a\n"
     ]
    }
   ],
   "source": [
    "a = 45\n",
    "b = 88\n",
    "c = 120\n",
    "\n",
    "if b > a:\n",
    "    print(\"b is greater than a\") #--This will not produce an error, it is indented and included in the if portion of the statement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The 6 Common Comparison Operators (These can be used in your if/else/elif statements):\n",
    "##### x == y               # x and y have the same values \n",
    "##### x != y               # x is not equal to y\n",
    "##### x > y                # x is greater than y\n",
    "##### x < y                # x is less than y\n",
    "##### x >= y               # x is greater than or equal to y\n",
    "##### x <= y               # x is less than or equal to y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if b > a:\n",
    "    print(\"b is greater than a\")\n",
    "else:\n",
    "    print(\"b is less than a\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b is greater than a\n"
     ]
    }
   ],
   "source": [
    "if b > a:\n",
    "    print(\"b is greater than a\")\n",
    "    \n",
    "elif b == a: #--elif says if the previous conditions were not true, then try this condition\n",
    "    print(\"b equals a\")\n",
    "    \n",
    "else:\n",
    "    print(\"b is less than a\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using and/or Operators\n",
    "- These operators are used to combine conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At least one of the conditions is True\n",
      "a equals b\n"
     ]
    }
   ],
   "source": [
    "#--Comparing more than 2 values at a time. Change the values of a, b, and c and see what happens--\n",
    "\n",
    "if a == b and a == c:\n",
    "    print(\"a equals b and c\")\n",
    "    \n",
    "elif a == b or a == c:\n",
    "    print(\"At least one of the conditions is True\")\n",
    "    \n",
    "    if a == b:\n",
    "        print(\"a equals b\")\n",
    "    else:\n",
    "        print(\"a equals c\")\n",
    "        \n",
    "else:\n",
    "    print(\"a does not equal b or c\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercises for if/else/elif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 88\n",
    "b = 88\n",
    "c = 42\n",
    "d = 10\n",
    "\n",
    "e = 'pen'\n",
    "f = 'pencil'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b and a are equal\n"
     ]
    }
   ],
   "source": [
    "#--1. Change the values of a, b, and c and see what happens--\n",
    "\n",
    "if b > a:\n",
    "    print(\"b is greater than a\")\n",
    "    \n",
    "elif b == a:\n",
    "    print(\"b and a are equal\")\n",
    "    \n",
    "else:\n",
    "    print(\"b is less than a\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "#--2. What do you think will happen when you run this code? Try changing the values of d and e and see what happens--\n",
    "\n",
    "if e in f:\n",
    "    print(True)\n",
    "    \n",
    "elif e == f:\n",
    "    print(\"e and f are equal\")\n",
    "    \n",
    "else:\n",
    "    print(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b is greater than c\n"
     ]
    }
   ],
   "source": [
    "#--3. You can have more than 1 elif. Change the values of a, b, c, and d and see what happens--\n",
    "\n",
    "if b > a:\n",
    "    print(\"b is greater than a\")\n",
    "elif b > c:\n",
    "    print(\"b is greater than c\")\n",
    "elif b > d:\n",
    "    print(\"b is greater than d\")\n",
    "else:\n",
    "    print(\"b is not greater than a, c, or d\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--4. Try writing your own if/else/elif statement below using a, b, and c--"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## for loops\n",
    "- __When To Use:__ To iterate over a sequence (such as a list, string, set, tuple, or dictionary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_lst = ['maple', 'pine', 'oak', 'spruce']\n",
    "\n",
    "num_lst1 = [1, 2, 3, 4, 5]\n",
    "num_lst2 = [1, 2, [0, 8], 4, 5]\n",
    "\n",
    "grocery_dict = {'apples': 5, 'bananas': 2, 'oranges': 3}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "#--Looping through the elements of num_lst1--\n",
    "for x in num_lst1:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "[0, 8]\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "#--How does the output of num_lst2 differ from that of num_lst1?--\n",
    "for x in num_lst2:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b\n",
      "a\n",
      "n\n",
      "a\n",
      "n\n",
      "a\n"
     ]
    }
   ],
   "source": [
    "#--Looping through the elements in a string--\n",
    "for x in 'banana': \n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercises: for loops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_lst3 = [[1, 2], [0, 8], [4, 5]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--1. Use a for loop to loop through num_lst3--"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--2. Use a for loop to print out the 0th element of each sublist in num_lst3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--3. Combining if/else with for loops--\n",
    "\n",
    "# for x in tree_lst:\n",
    "#     if 'oak' in x:\n",
    "#         print(True)\n",
    "#     else:\n",
    "#         print(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Other types that may be useful: Tuple, Set "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tuple \n",
    "- a collection which is ordered and __unchangeable__."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pine\n"
     ]
    }
   ],
   "source": [
    "x = ('maple', 'pine', 'oak', 'spruce')\n",
    "\n",
    "print(x[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set\n",
    "- A collection which is unordered and unindexed. \n",
    "- In Python sets are written with curly brackets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'maple', 'oak', 'pine'}\n"
     ]
    }
   ],
   "source": [
    "set1 = {'maple', 'pine', 'oak'}\n",
    "print(set1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "maple\n",
      "oak\n",
      "pine\n"
     ]
    }
   ],
   "source": [
    "#--How to access elements of a set--\n",
    "for x in set1:\n",
    "  print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How To Read an Error Message\n",
    "- There are many different types of errors, here we'll cover a few you may encounter when starting out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Syntax, Name, and Indentation Errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-185-b03ea80826b7>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-185-b03ea80826b7>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    if spam == 34\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#--What's wrong with the code below?--\n",
    "\n",
    "if spam == 34\n",
    "    print('Hi there!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-187-44021988771f>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-187-44021988771f>\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    print('Hello!')\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "spam = 22\n",
    "\n",
    "if spam == 34:\n",
    "    print('Hi there!')\n",
    "        print('Hello!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'va1' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-191-706c46fd62be>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mvar1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Ky'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Hello, my name is\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mva1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'va1' is not defined"
     ]
    }
   ],
   "source": [
    "var1 = 'Ky'\n",
    "\n",
    "print(\"Hello, my name is\" + va1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'str' object has no attribute 'upperr'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-194-a34351d8c353>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mvar2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'hello'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupperr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'str' object has no attribute 'upperr'"
     ]
    }
   ],
   "source": [
    "var2 = 'hello'\n",
    "\n",
    "print(var2.upperr())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Section 2: Functions and Packages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Built-in Functions (string examples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len()\n",
    ".upper()\n",
    ".lower()\n",
    ".split()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Packages (numpy sqrt example)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to install packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### User made functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Debugging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Section 3: Data Manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading/Saving JSON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading/Saving pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Viewing/Selecting pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking/Changing Column Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summarizing Your Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Replacing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making New Columns (Vector operations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying Functions to Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Renaming Columns, Rows, etc. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Groupby and Unstack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resample and Timedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
